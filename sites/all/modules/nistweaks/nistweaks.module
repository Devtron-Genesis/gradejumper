<?php

/*function nistweaks_print_custom_shop_page_of_views() {

	//drupal_add_js('/sites/all/modules/nistweaks/nistweaks.js');
	print '<div id="shop_product_type_menu_wrap">
	<ul>
			<li class="product_item studynrg" onclick="load_shop(this);"><div class="s7_shop_logo shop-studynrg"></div></li>
			<li class="product_item studydiet" onclick="load_shop(this);"><div class="s7_shop_logo shop-studydiet"></div></li>
			<li class="product_item tutorsave" onclick="load_shop(this);"><div class="s7_shop_logo shop-tutorsave"></div></li>
			<li class="product_item gjcoach" onclick="load_shop(this);"><div class="s7_shop_logo shop-gjcoach"></div></li>
	</ul>
</div>';


	$vocabulary = taxonomy_vocabulary_machine_name_load('product_categories');
	$terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

	foreach($terms as $term) {
		$arg_term = $term->name;

		print '<div id="product-type-' . strtolower($arg_term) .'" class="prices_view_wrap">';

		//print '<h3>Welcome to the '. $arg_term .'&trade; Shop</h3>';
		print '<div id="s7_prices_wrap">';

		//do the right hand fixed width menu first
		print '<div id="prices_vert_menu_wrap"> <div id="vtest_vert_menu_wrap">';
		$menu = menu_navigation_links('menu-'. strtolower($arg_term) .'-tab-menu');
		print theme('links__menu_intro_tab_menu', array('links' => $menu));
		print '</div> </div>';



		print '<div id="s7_prices_content">';
		//Print Promo Carousel
		print '<div id="shop_promo_carousel">';
		print views_embed_view('top_mini_carousel','block_1', $arg_term, 'Prices_page');
		print '</div>';

		print views_embed_view('rpf_Shop_page_grid','page_1', $arg_term);
		print '</div> </div> </div>';
	}

}*/

/*function nistweaks_preprocess_page(&$variables) {
  if (!empty($variables['node']) && $variables['node']->type == 'book_style_page_intro') {
		drupal_add_js(drupal_get_path('module', 'nistweaks') . '/nistweaks.js');
  }
}*/
/*function nistweaks_preprocess_node(&$vars) {
	if($vars['type'] == 'book_style_page_intro') {
		drupal_add_css(drupal_get_path('module', 'nistweaks') . '/book_style_page_intro.css');

	}
	if (arg(0) == 'node' && is_numeric(arg(1)) && arg(1) == 174) {
		drupal_add_css('https://gradejumpers.com/sites/default/files/premadepages/h2s/styles/stylesheet.css');
	}
}*/
/*
function nistweaks_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
	//$form['name']['#title_display'] = 'invisible';
	$form['name']['#attributes']['placeholder'] = 'Enter your name';
	$form['name']['#default_value'] = "";
	//$form['mail']['#title_display'] = 'invisible';
	$form['mail']['#attributes']['placeholder'] = 'Enter your email address';
	//$form['subject']['#title_display'] = 'invisible';
	$form['subject']['#attributes']['placeholder'] = 'Enter message subject';
	//$form['cid']['#title_display'] = 'invisible';
	$form['cid']['#options'][0] = 'Select product you have a query about';
	//$form['message']['#title_display'] = 'invisible';
	$form['message']['#attributes']['placeholder'] = 'Enter your message';

	// We need to to include the send copy to self field, but want it hidden
	unset($form['copy']);
	$form['copy'] = array(
		'#type' => 'hidden',
		'#default_value' => 1,
	);

}*/

/**
 * Implements hook_form_FORM_ID_alter(&$form, &$form_state, $form_id)
 */
/*function nistweaks_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {
  $form['actions']['continue_shopping'] = array(
    '#type' => 'button',
    '#value' => t('Continue Shopping'),
    '#weight' => -999,
  );
  // redirect user to product list page 'store' by default
  $form['actions']['continue_shopping']['#attributes'] = array('ONCLICK' => "window.location.href='" . url('shop') . "'; return false;");
}*/

/*function nistweaks_get_imagetopmenuclass() {
	$result=nistweaks_get_product_section();

	if($result == "") {
		$result = "none";
	}
	return $result;
}*/

/*function nistweaks_get_imagetopmenu() {
	$result=nistweaks_get_product_section();

	switch($result) {
		case "tutorsave":
			$retvalue = "/sites/default/files/images/logos/tutorsave_logo_white.png";
			break;
		case "studynrg":
			$retvalue = "/sites/default/files/images/logos/studynrg_logo_white.png";
			break;
		case "gradejump":
			$retvalue = "/sites/default/files/images/logos/gradejump_logo_white.png";
			break;
		default:
			$retvalue = "/sites/default/files/images/logos/GRADEJUMPERS-LOGO_white.png";
	}

	return $retvalue;
}*/

/*function nistweaks_get_pathtopmenu() {
	$result=nistweaks_get_product_section();

	switch($result) {
		case "tutorsave":
			$retvalue = "/tutorsave/home";
			break;
		case "studynrg":
			$retvalue = "/studynrg/home";
			break;
		case "gradejump":
			$retvalue = "/gradejump/home";
		default:
			$retvalue = "/";
	}

	return $retvalue;
}*/


/*function nistweaks_get_product_section() {
	$retvalue = "";

	$path = ltrim(drupal_get_path_alias($_SERVER['REQUEST_URI']), "/");
	$pathparts = explode('/', $path);

	$tutorsave = array(
				"tutorsave",
				"dashboard",
				"browse-subjects",
				"upgrade",
				"search",
				"my-ads",
				"job_board",
				"messages",
				"my_leads",
				"my-searches",
				"easyhire_agreements",
				"easyhire",
				"reviews_and_references",
				"privacy-setting",
				"myorders"

	);

	if(in_array($pathparts[0], $tutorsave)) {
		$retvalue = "tutorsave";
	}

	if(strtolower($pathparts[0]) == "studynrg") {
		$retvalue = "studynrg";
	}
	if(strtolower($pathparts[0]) == "gradejump") {
		$retvalue = "gradejump";
	}
	else if(strtolower($pathparts[0]) == "shop") {
		$retvalue = "none";
	}
	else if(strtolower($pathparts[0]) == "user") {
		$retvalue = "none";
	}
	else if(strtolower($pathparts[0]) == "users") {
		$retvalue = "none";
	}
	else if( (strtolower($pathparts[0]) == "node") && (is_numeric($pathparts[1])) ){
		$node = node_load($pathparts[1]);

		if($node->type == "ebook") { $retvalue = "studynrg"; }
		else if($node->type == "tutor_ad") { $retvalue = "tutorsave"; }
		else if($node->type == "parent_ad") { $retvalue = "tutorsave"; }
		else if($node->type == "video_content_paidfor") { $retvalue = "studynrg"; }
	}
	return $retvalue;
}*/

function nistweaks_form_alter(&$form, &$form_state, $form_id) {
    /*if ($form_id == 'user_login') {
        $form['name']['#attributes']['placeholder'] = t( 'Username or E-Mail' );
        $form['pass']['#attributes']['placeholder'] = t( 'Password' );
    }
    else */
    if($form_id == 'user_register_form')
    {
	    //$fb_logo =  '/' . drupal_get_path("module", "custom") . '/images/fb-logo-signup.png';
        //$form['actions']['submit']['#prefix'] = "<div class='register-desc'>By clicking 'Register with email', I confirm I agree to the ".l('Site Terms','node/63', array('attributes' => array('target'=> '_blank')))."</div>";
      //  $form['#prefix'] = "<div class='register-form'>";
        //$form['#suffix'] = '</div><div class="register-or">OR</div><div class="register-fb-login"><a id="fb_connect_button" href="javascript:void(0)"><img src="'.$fb_logo.'" border="0" /></a></div><div class="register-fb-desc">(we\'ll never post on your timeline without your permission)</div>';

        $form['account']['mail']['#attributes']['placeholder'] = 'Enter Email Address';
        //$form['#submit'][] = '_custom_register';
        $form['#submit'][] = '_nistweaks_user_register_submit';
        $form['account']['pass']['#process'] = array('form_process_password_confirm', '_nistweaks_process_password_confirm');
        if(isset($_SESSION) && isset($_SESSION['register_req_uri'])){
          $form['#action'] .= '?destination='. $_SESSION['register_req_uri'];
          //unset($_SESSION['register_req_uri']);
        }
        if( (arg(0) == "user")  && (arg(1) == "register") && (arg(2) == "tutor") ) {
          $form['actions']['submit']['#value'] = 'Continue';
          //if(arg(2) == "tutor") {
//$form['profile_registration']['field_i_am'][LANGUAGE_NONE][0]['value']['#default_value'] = '1';
//$form_state['values']['profile_registration']['field_i_am'][LANGUAGE_NONE][0]['value']['#default_value'] = '1';
          //}
        }
	}
	else if($form_id == 'user_pass') {
		$form['name']['#attributes']['placeholder'] = t( 'Email Address' );
	}
	else if($form_id == 'change_pwd_page_form') {
		//$form['current_pass']['#attributes']['placeholder'] = t( 'Current Password' );
		//$form['account']['pass']['#process'] = array('form_process_password_confirm', '_nistweaks_process_password_confirm');
	}
  else if($form_id == 'password_tab') {
    $form['account']['current_pass']['#attributes']['placeholder'] = t( 'Current Password' );
    $form['pass']['#process'] = array('form_process_password_confirm', '_nistweaks_process_password_confirm_change_page');
  }
}

function nistweaks_form_user_login_alter(&$form, $form_state, $form_id) {
  // Only make changes to these forms.
 if (in_array($form_id, array('user_login', 'user_login_block'))) {
   // now alter uname field to add placeholder text.
   $form['name']['#attributes']['placeholder'] = t( 'Enter Email Address' );
  $form['pass']['#attributes']['placeholder'] = t( 'Enter Password' );
 }
}

function _nistweaks_process_password_confirm($element)
{
	//dsm($element);
  $element = user_form_process_password_confirm($element);
  $element['pass1']['#attributes']['placeholder'] = t('Enter Password');
  $element['pass2']['#attributes']['placeholder'] = t('Re-enter Password');

  // Remove these lines if you want to keep the field labels
  // Hide labels for pass fields
  //$element['pass1']['#title_display'] = 'invisible';
  //$element['pass2']['#title_display'] = 'invisible';
  return $element;
}

function _nistweaks_process_password_confirm_change_page($element)
{
	//dsm($element);
  $element = user_form_process_password_confirm($element);
  $element['pass1']['#attributes']['placeholder'] = t('Enter New Password');
  $element['pass2']['#attributes']['placeholder'] = t('Re-enter New Password');

  // Remove these lines if you want to keep the field labels
  // Hide labels for pass fields
  //$element['pass1']['#title_display'] = 'invisible';
  //$element['pass2']['#title_display'] = 'invisible';
  return $element;
}


function _nistweaks_user_register_submit($form, &$form_state) {
/*  if($form['#action'] == "/user/register/tutor")
  {
    unset($_GET['destination']);
    $user_load = user_load($form['#user']->uid);
dsm('1');
    if(array_key_exists(5, $user_load->roles))
    {
      dsm('1');
      $form_state['redirect'] = '/node/add/tutor-ad';
    } else if(array_key_exists(4, $user_load->roles))
    {
      dsm('2');
      $form_state['redirect'] = '/node/add/parent-ad';
    } else {
        $form_state['redirect'] = '/dashboard';
    }
  } else {
      $form_state['redirect'] = '/dashboard';
  }
  dsm($form);
  dsm($form_state);*/
}

function nistweaks_preprocess_page(&$variables)
{
	if( (arg(0) == 'user' && arg(2) != 'myorders') || (arg(0) == 'register')) {
		$variables['theme_hook_suggestions'][] = 'page__front';
	}

	if(arg(0) == 'subjects') {
		$variables['theme_hook_suggestions'][] = 'page__subjects';
	}
	if(arg(0) == 'locations') {
		$variables['theme_hook_suggestions'][] = 'page__subjects';
	}
  if($variables['node']->type == 'tutor_ad') {
	  $variables['theme_hook_suggestions'][] = "page__node__" . $variables['node']->type;
  }

}


/**
 * TUTOR ad node submit callback
 */
function _tutor_ad_node_form_submit($form, $form_state) {

  /*$values = $form_state['values'];
  $nid = $values['nid'];
  $poscode = isset($values['field_locations']['und'][0]['postal_code']) ? $values['field_locations']['und'][0]['postal_code'] : '';
  $location_city = isset($values['field_locations']['und'][0]['city']) ? $values['field_locations']['und'][0]['city'] : '';

  //update value in node
  $node = new stdClass();
  $node->nid = $nid;       // node id
  $node->vid = $nid;       // node id
  $node->type = 'tutor_ad';  // tutor_ad content type

  $node->field_locations['und'][0]['city'] = str_replace('_', ' ', $location_city);
  $node->field_locations['und'][0]['postal_code'] = $poscode;
  field_attach_presave('node', $node);
  field_attach_update('node', $node);*/
  _custom_fill_locations();
}

/**
 * PARENT ad node submit callback
 */
function _parent_ad_node_form_submit($form, &$form_state) {
/*  $values = $form_state['values'];

  $nid = $values['nid'];
  $postcode = isset($values['field_parent_locations']['und'][0]['postal_code']) ? $values['field_parent_locations']['und'][0]['postal_code'] : '';
  $location_city = isset($values['field_parent_locations']['und'][0]['city']) ? $values['field_parent_locations']['und'][0]['city'] : '';

//$node_load = node_load($nid);
echo "<pre>";
//print_r($node_load->field_parent_locations);
print_r($form)
echo "</pre>";
//die("hi");

  //update value in node
  $node = new stdClass();
  $node->nid = $nid;       // node id
  $node->vid = $nid;       // node id
  $node->type = 'parent_ad';  // tutor_ad content type

  $node->field_parent_locations['und'][0]['city'] = str_replace('_', ' ', $location_city);
  $node->field_parent_locations['und'][0]['postal_code'] = $postcode;

//  $locations = array(
//     "city" => str_replace('_', ' ', $location_city),
//     "postal_code" => $postcode,
//  );
//  $node->field_parent_locations[0] = $locations;

  field_attach_presave('node', $node);
  field_attach_update('node', $node);*/
/*  echo "<pre>";
  $inperson = 0;
  $tutoringplaces = $form_state['values']['field_tutor_where_would_lessons']['und'];
  foreach($tutoringplaces as $place) {
    if($place['tid'] > 992) {
      $inperson++;
    }
  }

  if($inperson > 0) {
    $tutoringplaces[] = array('tid' => 992);
  }
  $form_state['values']['field_tutor_where_would_lessons']['und'] = $tutoringplaces;

  print_r($form_state['values']['field_tutor_where_would_lessons']);
  echo "</pre>";*/

  _custom_fill_locations();
}

function nistweaks_node_presave($node) {
  if (($node->type == "parent_ad") || ($node->type == "tutor_ad")) {
    $inperson = 0;
    $places = $node->field_tutor_where_would_lessons['und'];
    foreach($places as $place) {
      if($place['tid'] == 992) {
        $inperson = -1;
      }
      if(($place['tid'] > 992) && ($inperson > -1)) {
        $inperson++;
      }
    }
    if($inperson > 0) {
      $places[] = array('tid' => 992);
    }
    $node->field_tutor_where_would_lessons['und'] =  $places;
  }
}

/* Make all user gold users */
/* THis was added for our intro period'
   To use this function excute via:
     drush php-eval "make_all_users_gold();"
*/
function make_all_users_gold() {
  make_all_tutors_gold();
  make_all_parents_gold();
}
function make_all_tutors_gold() {
  $tutor_role = user_role_load_by_name("Tutor");
  $gold_role = user_role_load_by_name("Gold");
  $users = db_select('users_roles', 'ur')
      ->fields('ur', array('uid'))
      ->condition('ur.rid', $tutor_role->rid, '=')
      ->execute()
      ->fetchCol();

  //dsm($uids);
  foreach($users as $user) {
    user_multiple_role_edit(array($user), 'add_role',   $gold_role->rid);
  }
}

function make_all_parents_gold() {
  $tutor_role = user_role_load_by_name("Parent");
  $gold_role = user_role_load_by_name("Gold");
  $users = db_select('users_roles', 'ur')
      ->fields('ur', array('uid'))
      ->condition('ur.rid', $tutor_role->rid, '=')
      ->execute()
      ->fetchCol();

  //dsm($uids);
  foreach($users as $user) {
    user_multiple_role_edit(array($user), 'add_role',   $gold_role->rid);
  }
}

/*-----------------------------------------------------------------------------------*/
/* users_adverts_has_pending                                                          */
/*-----------------------------------------------------------------------------------*/
/* Gets a count of the number of PENDING adverts a user has                          */
/*                                                                                   */
/* Returns:- count of pending adverts                                                */
/* Arguments:- none                                                                  */
/*-----------------------------------------------------------------------------------*/
function users_adverts_has_pending() {
  global $user;
  if(user_has_role(4, $user)){  //for parent
    $advert_type = 'parent_ad';
  }elseif(user_has_role(5, $user)){  //for tutor
    $advert_type= 'tutor_ad';
  }
  $users_id = $user->uid;
  $queries = db_query("SELECT * FROM node AS n LEFT JOIN field_data_field_expired AS ne ON ne.entity_id = n.nid WHERE n.uid = (:uid) AND n.status = 0 AND n.type = ('".$advert_type."') AND ne.field_expired_value = 0", array(':uid' => $users_id))->fetchAll();
  return count($queries);

}
/*-----------------------------------------------------------------------------------*/
/* users_advert_has_expired                                                          */
/*-----------------------------------------------------------------------------------*/
/* Gets a count of the number of EXPIRED adverts a user has                          */
/*                                                                                   */
/* Returns:- count of expired adverts                                                */
/* Arguments:- none                                                                  */
/*-----------------------------------------------------------------------------------*/
function users_advert_has_expired() {
  global $user;
  if(user_has_role(4, $user)){  //for parent
    $advert_type = 'parent_ad';
  }elseif(user_has_role(5, $user)){  //for tutor
    $advert_type= 'tutor_ad';
  }
  $users_id = $user->uid;
  $queries = db_query("SELECT * FROM node AS n LEFT JOIN field_data_field_expired AS ne ON ne.entity_id = n.nid WHERE n.uid = (:uid) AND n.status = 1 AND n.type = ('".$advert_type."') AND ne.field_expired_value = 1", array(':uid' => $users_id))->fetchAll();
  //print_r($queries);
  return count($queries);
}

/*-----------------------------------------------------------------------------------*/
/* users_live_advert_count                                                           */
/*-----------------------------------------------------------------------------------*/
/* Gets a count of the number of LIVE adverts a user has                             */
/*                                                                                   */
/* Returns:- count of live adverts                                                   */
/* Arguments:- none                                                                  */
/*-----------------------------------------------------------------------------------*/
function users_live_advert_count() {
  global $user;
  if(user_has_role(4, $user)){  //for parent
    $advert_type = 'parent_ad';
  }elseif(user_has_role(5, $user)){  //for tutor
    $advert_type= 'tutor_ad';
  }
  $users_id = $user->uid;
  $queries = db_query("SELECT * FROM node AS n LEFT JOIN field_data_field_expired AS ne ON ne.entity_id = n.nid WHERE n.uid = (:uid) AND n.status = 1 AND n.type = ('".$advert_type."') AND ne.field_expired_value = 0", array(':uid' => $users_id))->fetchAll();
  //print_r($queries);
  return count($queries);
}

/*-----------------------------------------------------------------------------------*/
/* adverts_live_pending_expired_status                                               */
/*-----------------------------------------------------------------------------------*/
/* Returns a string to say if a user has live, pending, expired or no adverts        */
/*   Order of precedence is Live, pending, expired, none.                            */
/*                                                                                   */
/* Returns:- string "live", "pending", "expired" or "none"                           */
/* Arguments:- none                                                                  */
/*-----------------------------------------------------------------------------------*/
function adverts_live_pending_expired_status() {
  if(users_live_advert_count() > 0 ) {
    $retvalue = "live";
  }
  elseif(users_adverts_has_pending() > 0) {
    $retvalue = "pending";
  }
  elseif (users_advert_has_expired() > 0) {
    $retvalue = "expired";
  }
  else {
    $retvalue = "noadvert";
  }

  return $retvalue;
}

/*-----------------------------------------------------------------------------------*/
/* postcodeFormat                                                                    */
/*-----------------------------------------------------------------------------------*/
/* Takes a postcode and returns it in the correct uk postcode format                 */
/*                                                                                   */
/* Returns:- Corrrectly formatted postcode as a string                               */
/* Arguments:- string (a UK postcode)                                                */
/*-----------------------------------------------------------------------------------*/
function postcodeFormat($postcode)
{
    //trim and remove spaces
    $cleanPostcode = preg_replace("/[^A-Za-z0-9]/", '', $postcode);

    //make uppercase
    $cleanPostcode = strtoupper($cleanPostcode);

    //if 5 charcters, insert space after the 2nd character
    if(strlen($cleanPostcode) == 5)
    {
        $postcode = substr($cleanPostcode,0,2) . " " . substr($cleanPostcode,2,3);
    }

    //if 6 charcters, insert space after the 3rd character
    elseif(strlen($cleanPostcode) == 6)
    {
        $postcode = substr($cleanPostcode,0,3) . " " . substr($cleanPostcode,3,3);
    }


    //if 7 charcters, insert space after the 4th character
    elseif(strlen($cleanPostcode) == 7)
    {
        $postcode = substr($cleanPostcode,0,4) . " " . substr($cleanPostcode,4,3);
    }

    return $postcode;
}

/*-----------------------------------------------------------------------------------*/
/* averagereviews                                                                    */
/*-----------------------------------------------------------------------------------*/
/* Returns an array containing the count and average review score of all reviews     */
/*                                                                                   */
/* Returns:- array ~ count and average of all revirews on the site                   */
/* Arguments:- None                                                                  */
/*-----------------------------------------------------------------------------------*/
function averagereviews() {
  $query = db_query('SELECT COUNT(manual_id) AS reviewcount, (((SUM(quality) + SUM(reliability) + SUM(value))/3)/COUNT(manual_id))/20 AS reviewaverage FROM gj_manual_ratings');

  $result = $query->fetchObject();
  //print_r($result);

  return $result;
}

/*-----------------------------------------------------------------------------------*/
/* get_subjectlevel_qs                                                               */
/*-----------------------------------------------------------------------------------*/
/* Returns a "Level subject" string obtained from query strings                      */
/*                                                                                   */
/* Returns:- array ~ count and average of all revirews on the site                   */
/* Arguments:- None                                                                  */
/*-----------------------------------------------------------------------------------*/

function get_levelsubject_qs(){
  $sla = get_level_subject_from_path();
  $level = $sla['level'];
  $subject = $sla['subject'];
  if(isset($level)) {
    $level .= " ";
  }
  return $level.$subject;
}

/*-----------------------------------------------------------------------------------*/
/* get_subject_qs                                                               */
/*-----------------------------------------------------------------------------------*/
/* Returns a "Subject" string obtained from query strings                            */
/*                                                                                   */
/* Returns:- string                                                                  */
/* Arguments:- None                                                                  */
/*-----------------------------------------------------------------------------------*/

function get_subject_qs(){
  return get_level_subject_from_path()['subject'];
}
