<?php

/**
 * @file
 * Contains tests for the Facebook Tracking Pixel module.
 */

require_once('facebook_tracking_pixel.helper.php');

/**
 * Test case.
 */
class FacebookTrackingPixelTestTrackingCase extends FacebookTrackingPixelTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return [
      'name' => 'Tracking Test',
      'description' => 'Place tracking pixel onto a site and control events.',
      'group' => 'Facebook Tracking Pixel',
    ];
  }

  /**
   * Test adding basecodes through UI and see they appear on the page.
   */
  public function testFacebookTrackingPixelBasePixel() {
    // Submit a new global basecode.
    $edit = [];
    $edit['name'] = $this->randomName(8);
    $id1 = 12314512312;
    $edit['fbid'] = $id1;
    $edit['global'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/base_codes', $edit, t('Add'));
    $this->assertText(t('Facebook Base Tracking Code Added'), t('Add new base code through the admin UI'));

    // Submit a duplicate item using the same FB basecode ID.
    $edit['name'] = $this->randomName(8);
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/base_codes', $edit, t('Add'));
    $this->assertText(t('You only need to add a base tracking code once.'), t('Add duplicate base code through the admin UI'));

    // Submit a second global basecode.
    $edit = [];
    $edit['name'] = $this->randomName(8);
    $id2 = 789789789;
    $edit['fbid'] = $id2;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/base_codes', $edit, t('Add'));
    $this->assertText(t('Facebook Base Tracking Code Added'), t('Add new base code through the admin UI'));

    // Enable all roles for tracking.
    $fbHelper = new facebookTrackingPixel\FacebookTrackingPixelTestHelper;
    $fbHelper->enable_tracking_all_roles();
    // With two base codes set to global they should both appear on a page.
    $this->drupalGet('');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $id1 . '.js', t('Tracking Code 1 Found in Raw Source'), 'FBTrkPx');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $id2 . '.js', t('Tracking Code 2 Found in Raw Source'), 'FBTrkPx');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Setup Tracking Code Found in Raw Source'), 'FBTrkPx');

  }

  /**
   * Attempt to add a path tracking item to the node created using path alias.
   */
  public function testFacebookTrackingPixelPathItemNodes() {
    // Test to add a path item to the existing node created in the setup.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = 'node/' . $this->nodeID;
    $edit['event_base_code_id'] = $this->baseCodeID;
    $edit['event_type[addtocart]'] = TRUE;
    $edit['event_type[lead]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');


    // Attempt to add a path item for the same path as above using alias path.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = $this->testFacebookTrackingPixelNodeAlias;
    $edit['event_base_code_id'] = $this->baseCodeID;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('The tracker event you are trying to add is the resolved path in Drupal as the event with name'), t('Adding path with same alias should fail. This test should pass.'), 'FBTrkPx');

    // Attempt to add a path item for the same path as above using system path.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $this->assert(TRUE, 'Using Node ID ' . $this->nodeID, 'FBTrkPx');
    $path = 'node/' . $this->nodeID;
    $edit['event_path'] = $path;
    $edit['event_base_code_id'] = $this->baseCodeID;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('You cannot add a duplicate event to the same path and base code.'), t('Adding path with same system path should fail. This test should pass.'), 'FBTrkPx');
  }

  /**
   * Test path items using pages routed via menu router.
   *
   * This will apply to views, custom modules, panels, etc.
   */
  public function testFacebookTrackingPixelPathItemRouter() {
    // Test to add a path item to a menu router path item.
    // We are going to use a path that is available in any Drupal installation.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = 'admin';
    $edit['event_base_code_id'] = $this->baseCodeID;
    $edit['event_type[addtocart]'] = TRUE;
    $edit['event_type[lead]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');

    // Attempt to submit another item using the same menu router path.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = 'admin';
    $edit['event_base_code_id'] = $this->baseCodeID;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('You cannot add a duplicate event to the same path and base code.'), t('A duplicate menu router item was not allowed to be submitted'), 'FBTrkPx');

  }

  /**
   * Testing various scenarios for tracking pages.
   * @throws \Exception
   */
  public function testFacebookTrackingPixelTrackPages() {
    // Test Basecode ID that is not global
    $testfbid = '890890890890';
    db_insert('facebook_tracking_pixel_base_codes')
      ->fields([
        'base_code_name' => 'Test Basecode',
        'base_code_fbid' => $testfbid,
        'base_code_global' => 0,
        'weight' => 10,
      ])
      ->execute();
    // Retreieve the base code ID created.
    $testbasecodeid = db_select('facebook_tracking_pixel_base_codes', 'c')
      ->fields('c', ['base_code_id'])
      ->condition('base_code_fbid', $testfbid, '=')
      ->execute()
      ->fetchField();

    // Turn on tracking for roles.
    $edit = [];
    $edit['facebook_tracking_pixel_roles_administrator'] = TRUE;
    $edit['facebook_tracking_pixel_roles_anonymous_user'] = TRUE;
    $edit['facebook_tracking_pixel_roles_authenticated_user'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Save the settings to track all roles.'), 'FBTrkPx');

    // Load the front page and check for the global and non-global code.
    $this->drupalGet('');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Global tracking code JS found in head.'), 'FBTrkPx');
    $this->assertNoRaw('facebook_tracking_pixel/fb_tkpx.890890890890.js', t('Non-global tracking code JS not found in head.'), 'FBTrkPx');

    // Track created node using system path.
    $this->drupalGet('node/' . $this->nodeID);
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Global tracking code JS found in head for node system path.'), 'FBTrkPx');
    $this->assertNoRaw('facebook_tracking_pixel/fb_tkpx.890890890890.js', t('Non-global tracking code JS found in head for node system path.'), 'FBTrkPx');

    // Track created node using alias path.
    $this->drupalGet($this->testFacebookTrackingPixelNodeAlias);
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Global tracking code JS found in head for node alias path.'), 'FBTrkPx');
    $this->assertNoRaw('facebook_tracking_pixel/fb_tkpx.890890890890.js', t('Non-global tracking code JS found in head for node system path.'), 'FBTrkPx');

    // Create a new node and add path tracking to the new node.
    $node = $this->drupalCreateNode();
    $this->assertTrue(!empty($node->nid), t('A basic page has been created with node ID %nid and title %title and path alias', [
      '%nid' => $node->nid,
      '%title' => $node->title,
    ]), t('FBTrkPx'));

    // Create alias for the node just created above.
    $edit = [];
    $edit['source'] = 'node/' . $node->nid;
    $testpath = $edit['alias'] = 'pathtest';
    $this->drupalPost('admin/config/search/path/add', $edit, t('Save'));
    // Visit the system path for the node and confirm a cache entry is
    // created.
    cache_clear_all('*', 'cache_path', TRUE);
    $this->drupalGet($edit['source']);
    $this->assertTrue(cache_get($edit['source'], 'cache_path'), 'Cache entry was created.');

    // Attempt to add a path item for the same path as above using alias path.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = $testpath;
    $edit['event_base_code_id'] = $testbasecodeid;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');
    $testbasecodeuid = db_select('facebook_tracking_pixel_events_path', 'c')
      ->fields('c', ['event_uid'])
      ->condition('event_base_code_id', $testbasecodeid, '=')
      ->execute()
      ->fetchField();

    // Load the system path of the newly created node and see if code exists.
    $this->drupalGet('node/' . $node->nid);
    $this->assertRaw('facebook_tracking_pixel/pathtracking/fb_trk.' . $testbasecodeuid . '.js', t('Path tracking code JS found in head.'), 'FBTrkPx');

    // Load the alias path of the newly created node and see if code exists.
    $this->drupalGet($testpath);
    $this->assertRaw('facebook_tracking_pixel/pathtracking/fb_trk.' . $testbasecodeuid . '.js', t('Path tracking code JS found in head.'), 'FBTrkPx');
  }

  /**
   * Test path tracking when nodes are deleted.
   *
   * Scenarios tested:
   * 1. Node created without alias
   * 2. Add tracking to node/XX.
   * 3. Node deleted.
   * 4. Check status of tracking.
   *
   * 1. Node created with alias
   * 2. Add trackign to alias
   * 3. Node deleted.
   * 4. Check status of tracking.
   */
  public function testFacebookTrackingPixelDeleteNode() {
    // Create node to add tracking and then delete the node.
    $node = $this->drupalCreateNode();
    $this->assertTrue(!empty($node->nid), t('A basic page has been created with node ID %nid and title %title and path alias', [
      '%nid' => $node->nid,
      '%title' => $node->title,
    ]), t('FBTrkPx'));

    $nid = $node->nid;
    // Add a path tracking to the node created above.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = 'node/' . $node->nid;
    $edit['event_base_code_id'] = $this->baseCodeID;
    $edit['event_type[addtocart]'] = TRUE;
    $edit['event_type[lead]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');

    // Delete node.
    $this->drupalGet('node/' . $node->nid . '/edit');
    // Activate the delete button.
    $this->drupalPost(NULL, NULL, t('Delete'));
    // Activate the confirmation delete button.
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText(t('Basic page @title has been deleted.', ['@title' => $node->title]), t('Test node deleted'), 'FBTrkPx');

    // Check DB to see if tracking item is now showing as disabled.
    $result = db_select('facebook_tracking_pixel_events_path', 'c')
      ->fields('c', [
        'event_path_system',
        'event_enable',
        'event_id',
        'event_uid',
      ])
      ->condition('event_path_system', 'node/' . $nid, '=')
      ->execute()
      ->fetchAssoc();
    $this->assertEqual($result['event_enable'], 0, t('Tracking event is disabled in database after node delete'), 'FBTrkPx');

    // Check edit page to see if tracking item is now showing as disabled.
    $this->drupalGet('admin/config/system/facebook_tracking_pixel/path/edit/' . $result['event_id']);
    $this->assertText(t('This event is disabled because the path being tracked no longer exists. You may only update the path of this item to provide a new valid path.'), t('Tracking event is disabled in the UI after node delete.'), 'FBTrkPx');

    //  Make sure that the tracking code does not appear on any page.
    $this->drupalGet('');
    $this->assertNoRaw($result['event_uid'], t('Disabled tracking code does not appear on any page.'));


    // Create node, add an alias, add tracking, and then delete the node.
    $node = $this->drupalCreateNode();
    $this->assertTrue(!empty($node->nid), t('A basic page has been created with node ID %nid and title %title and path alias', [
      '%nid' => $node->nid,
      '%title' => $node->title,
    ]), t('FBTrkPx'));

    // Create alias for the node just created above.
    $edit = [];
    $edit['source'] = 'node/' . $node->nid;
    $edit['alias'] = 'testernode';
    $this->drupalPost('admin/config/search/path/add', $edit, t('Save'));

    $nid = $node->nid;
    // Add a path tracking to the node created above.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = 'node/' . $node->nid;
    $edit['event_base_code_id'] = $this->baseCodeID;
    $edit['event_type[addtocart]'] = TRUE;
    $edit['event_type[lead]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');

    // Delete node.
    $this->drupalGet('node/' . $node->nid . '/edit');
    // Activate the delete button.
    $this->drupalPost(NULL, NULL, t('Delete'));
    // Activate the confirmation delete button.
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText(t('Basic page @title has been deleted.', ['@title' => $node->title]), t('Test node deleted'), 'FBTrkPx');

    // Check DB to see if tracking item is now showing as disabled.
    $result = db_select('facebook_tracking_pixel_events_path', 'c')
      ->fields('c', [
        'event_path_system',
        'event_enable',
        'event_id',
        'event_uid',
      ])
      ->condition('event_path_system', 'node/' . $nid, '=')
      ->execute()
      ->fetchAssoc();
    $this->assertEqual($result['event_enable'], 0, t('Tracking event is disabled in database after node delete'), 'FBTrkPx');

    // Check edit page to see if tracking item is now showing as disabled.
    $this->drupalGet('admin/config/system/facebook_tracking_pixel/path/edit/' . $result['event_id']);
    $this->assertText(t('This event is disabled because the path being tracked no longer exists. You may only update the path of this item to provide a new valid path.'), t('Tracking event is disabled in the UI after node delete.'), 'FBTrkPx');

    //  Make sure that the tracking code does not appear on any page.
    $this->drupalGet('');
    $this->assertNoRaw($result['event_uid'], t('Disabled tracking code does not appear on any page.'));

  }

  /**
   * This tests the role visibility feature.
   */
  public function testFacebookTrackingPixelRoleVisibility() {
    $fbHelper = new facebookTrackingPixel\FacebookTrackingPixelTestHelper;
    // Create a tracking code to test against.
    $edit = [];
    $edit['name'] = $this->randomName(8);
    $id1 = 3453453453;
    $edit['fbid'] = $id1;
    $edit['global'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/base_codes', $edit, t('Add'));
    $this->assertText(t('Facebook Base Tracking Code Added'), t('Add new base code through the admin UI'));
    $fbHelper->enable_tracking_all_roles();
    $this->drupalGet('');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $id1 . '.js', t('Admin User - Tracking Code 1 Found in Raw Source'), 'FBTrkPx');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Admin User - Setup Tracking Code Found in Raw Source'), 'FBTrkPx');

    $fbHelper->delete_fb_tracking_role_variables();
    // Enable only testing roles for tracking.
    $fbHelper->enable_tracking_testing_role();

    // Drop out of admin and login as the normal guy.
    $this->drupalLogout();
    $this->drupalLogin($this->webUser);

    $this->drupalGet('');
    $this->assertNoRaw('facebook_tracking_pixel/fb_tkpx.' . $id1 . '.js', t('Web User - Tracking Code NOT Found in Raw Source'), 'FBTrkPx');
    $this->assertNoRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Web User - Setup Tracking Code NOT Found in Raw Source'), 'FBTrkPx');

    // Remove role and test
    $fbHelper->remove_role_from_user($this->webUser, 'fb pixel tester');
    cache_clear_all('*', 'cache_page', TRUE);
    $this->drupalGet('');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $id1 . '.js', t('Web User - Tracking Code Found in Raw Source'), 'FBTrkPx');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Web User - Setup Tracking Code Found in Raw Source'), 'FBTrkPx');

    // Log out and back in as admin and check tracking codes.
    $this->drupalLogout();
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $id1 . '.js', t('Admin User - Tracking Code Found in Raw Source'), 'FBTrkPx');
    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->baseCodeFBID . '.js', t('Admin User - Setup Tracking Code Found in Raw Source'), 'FBTrkPx');

  }
}
