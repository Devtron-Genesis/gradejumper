<?php

/********************************************************************
 * generate_tutor_ad_node_send_message_button($node)                *
 ********************************************************************
 * Description: Generates a send message button to be displayed on  *
 *              tutor ad node types. Not visible to other tutors.   *
 * Arguments:   $node                                               *
 * Return:      Pre-rendered HTML string                            *
 ********************************************************************
 * Author:      Dean Hopkins                                        *
 * Date:        08-01-2019                                          *
 ********************************************************************/
function generate_tutor_ad_node_send_message_button($node, $mobile=false){
    $proactive = isset($_GET['proactive']) ? $_GET['proactive'] : null;

    $ret_html = "";

    global $user;
    $tutor_rid = user_role_load_by_name("Tutor");

    $is_tutor = user_has_role($tutor_rid->rid, $user);

    if ($is_tutor && !($node->op == "Preview")){
        $ret_html = "";
    } else {
        $class = "btn";
        if ($mobile){ $class .= " tutor-ad-header-send-message-mobile"; }

        if ($node->op == "Preview"){
            $ret_html = "<a>";
        } else {
            if ($proactive){
                $ret_html = "<a href ='/send_message/" . $node->nid . "?proactive=" . $proactive . "'>";
            } else {
                $ret_html = "<a href ='/send_message/" . $node->nid . "'>";
            }
        }
        $ret_html .= "<button type='button' class='" . $class . "' id='tutor-ad-header-send-message'>Send a message</button>";
        $ret_html .= "</a>";

    }

    return $ret_html;
}

/********************************************************************
 * _get_message_url($node)                                          *
 ********************************************************************
 * Description: Determine message URL to be used in button link     *
 *              Only allows one thread per user->tutor. If they     *
 *              have messaged them before, redirect to that thread. *
 *              Otherwise, open a new thread.                       *
 *              One thread per tutor-ad / parent.                   *
 * Arguments:   $node                                               *
 * Return:      Array[url, options]                                 *
 ********************************************************************
 * Author:      Dean Hopkins                                        *
 * Date:        08-01-2019                                          *
 ********************************************************************/
function _get_message_url($node){
    global $user;
    $ret = array();

    //check if message thread already has link to node
    $query = db_select('message_tutor_node_link', 'mtnl');
    $query->join('pm_index', 'pmi', 'pmi.thread_id = mtnl.message_thread_id');
    $query->join('pm_message', 'pmm', 'pmm.mid = pmi.mid');
    $query->fields('mtnl', array('message_thread_id'));
    $query->condition('mtnl.node_id', $node->nid, '=');
    $query->condition('pmm.author', $user->uid, '=');
    $result = $query->execute();

    if ($result->rowCount() > 0){
        $existing_thread_id = $result->fetchAssoc()['message_thread_id'];
        $ret_url = url('messages/view/'. $existing_thread_id);
        $ret['url'] = $ret_url;
        $ret['options'] = array();
    } else {
        $options = array('query' => array('nid' => base64_encode($node->nid)));
        $ret_url = url('messages/new/'. $node->uid);
        $ret['url'] = $ret_url;
        $ret['options'] = $options;
    }

    return $ret;
}
